/* Requires
  - jquery
  - underscore
  - glMatrix
  - key-handler
  - mouse-handler
  - enumerations
 */

var FrameHandler = (function() {

  var zoomKeyCodes = [/*Z*/100, /*X*/ 101];
  var panKeyCodes = [/*T*/84,/*F*/70,/*G*/71,/*H*/72];
  var objectRotationKeyCodes = [87/*W*/, 65/*A*/, 83/*S*/, 68/*D*/];
  var cameraRotationKeyCodes = [/*I*/ 73, /*J*/ 74, /*K*/ 75, /*L*/ 76];

  function opposingKeysDir(keyStates, posKeyCode, negKeyCode) {
    return (keyStates[posKeyCode] == KeyState.down ? 1.0: 0.0) +
           (keyStates[negKeyCode] == KeyState.down ? -1.0: 0.0);
  }

  function rotateAboutAxis(amount, axis, m) {
    /* t is in seconds not milliseconds */
    var axisVector;

    switch (axis) {
      case Axis.x:
        axisVector = [ m[0], m[4], m[8] ];
        break;
      case Axis.y:
        axisVector = [ m[1], m[5], m[9] ];
        break;
      case Axis.z:
        axisVector = [ m[2], m[6], m[10] ];
        break;
    }

    mat4.rotate(m, amount, axisVector);
  }



  /*
   *
   * @direction@ is either -1, 0, or 1.
   * @value@ is of form { disp: <displacement>, velocity: <velocity> }
   *
   */
  function accelerate(direction, accel, dragCoefficient, duration, value) {

    var t  = duration/1000.0;

    var s0 = value.disp;

    var u  = value.velocity;
    var drag = dragCoefficient* Math.pow(Math.abs(u),0.5) *
               (u >= 0 ? 1 : -1); /* Drag is proportional to velocity */
    var a  = accel*direction - drag;
    var v  = u + a*t;
    var s  = s0 + u*t + 0.5*a*t*t;
    var newValueState = { disp: s, velocity: v };
    return newValueState;
  }



  function panValue(duration, keyStates, value) {
    var a = 4.0, dragCoeff = 2.0;
    var kcs = panKeyCodes;
    var xDir = opposingKeysDir(keyStates, kcs[3], kcs[1]),
        yDir = opposingKeysDir(keyStates, kcs[0], kcs[2]),
        xValues = accelerate(xDir,a,dragCoeff,duration,
                             { disp: value.xDisp, velocity: value.xVelocity }),
        yValues = accelerate(yDir,a,dragCoeff,duration,
                             { disp: value.yDisp, velocity: value.yVelocity });

    value.xDisp     = xValues.disp;
    value.xVelocity = xValues.velocity;
    value.yDisp     = yValues.disp;
    value.yVelocity = yValues.velocity;
    return({ xDisp: value.xDisp, yDisp: value.yDisp });
  }

  function objectRotationValue(duration, keyStates, value) {
    var a = 10.0, dragCoeff = 2.0;

    var kcs = objectRotationKeyCodes;
    var vertDir  = opposingKeysDir(keyStates, kcs[0], kcs[2]),
        horizDir = opposingKeysDir(keyStates, kcs[1], kcs[3]),
        vertValues =  accelerate(vertDir,a,dragCoeff,duration,
                                 { disp: 0.0, velocity: value.vertVelocity }),
        horizValues =  accelerate(horizDir,a,dragCoeff,duration,
                                 { disp: 0.0, velocity: value.horizVelocity });

    rotateAboutAxis(vertValues.disp,  Axis.x, value.rotationMatrix);
    rotateAboutAxis(horizValues.disp, Axis.y, value.rotationMatrix);

    value.vertVelocity  = vertValues.velocity;
    value.horizVelocity = horizValues.velocity;
    return value.rotationMatrix;
  }

  function cameraRotationValue(duration, keyStates, value) {
     var a = 10.0, dragCoeff = 2.0;

     var kcs = cameraRotationKeyCodes;
     var vertDir  = opposingKeysDir(keyStates, kcs[0], kcs[2]),
         horizDir = opposingKeysDir(keyStates, kcs[1], kcs[3]),
         vertValues =  accelerate(vertDir,a,dragCoeff,duration,
                                  { disp: 0.0, velocity: value.vertVelocity }),
         horizValues =  accelerate(horizDir,a,dragCoeff,duration,
                                  { disp: 0.0, velocity: value.horizVelocity });

     rotateAboutAxis(vertValues.disp,  Axis.x, value.mvpMatrix);
     rotateAboutAxis(horizValues.disp, Axis.y, value.mvpMatrix);

     value.vertVelocity  = vertValues.velocity;
     value.horizVelocity = horizValues.velocity;
     return value.mvpMatrix;
   }

   function zoomValue(duration,keyStates,value) {
     var direction = opposingKeysDir(keyStates, 88,90);
     var newValue = accelerate(direction,10.0,3.0,duration,value);
     value.disp     = newValue.disp;
     value.velocity = newValue.velocity;
     return value.disp;
   }

   function mouseRotationValue(duration, mouseKeyStates, value) {
     var m = mouseKeyStates;
     var d = 0;
     if (m.mouseDown) {
       d = Math.sqrt(Math.pow(m.finishX - m.startX,2) +
                             Math.pow(m.finishY - m.startY,2));
     }
     return (d / 1000.0);
   }

   function mousePanValue(duration, mouseKeyStates, value) {
     var m = mouseKeyStates;
     if (m.mouseDown) {
       value.xDisp = value.xDisp + 2*(m.finishX - m.startX)/value.canvasWidth;
       value.yDisp = value.yDisp + 2*(m.startY - m.finishY)/value.canvasHeight;
     }
     return value;
   }

   /* initalValue of form { xDisp: ..., xVelocity: ..., yDisp: ..., yVelocity: ... } */
   function pan(canvas, initialValue) {
     return KeyHandler.makeFrameHandler(canvas,panKeyCodes,initialValue,panValue);
   }

   function objectRotation(canvas, initialRotationMatrix) {
      return KeyHandler.makeFrameHandler(canvas,objectRotationKeyCodes,
        { vertVelocity: 0.0, horizVelocity: 0.0, rotationMatrix: initialRotationMatrix },
        objectRotationValue);
   }


   function cameraRotation(canvas, initialMVPMatrix) {
     return KeyHandler.makeFrameHandler(canvas,cameraRotationKeyCodes,
       { vertVelocity: 0.0, horizVelocity: 0.0, mvpMatrix: initialMVPMatrix },
       cameraRotationValue);
   }

   function zoom(canvas) {
     return KeyHandler.makeFrameHandler(canvas,[90 /*Z*/,88 /*X*/],
                                             { disp: 0.0, velocity: 0.0}, zoomValue);
   }

   /* initalPanValue of form { pan: { xDisp: ..., xVelocity: ..., yDisp: ..., yVelocity: ... } } */
   function mouse(canvas, initialValueDict) {
     return MouseHandler.makeFrameHandler(canvas,
       { pan: { keyCodes: []
              , initialValue: initialValueDict.pan
              , frameValue: mousePanValue } });
   }


  /* Return the "methods" of this "module" */
  return( { pan:            pan
          , objectRotation: objectRotation
          , cameraRotation: cameraRotation
          , zoom:           zoom
          , mouse:          mouse });

})();