/* Requires jQUery */

var KeyHandler = (function() {

  /*
   *  @makeFrameHandler@ returns a frame handler that manipulates a shared
   *  state, that gets modified by keypresses.
   *
   * The "frame value" function 'f' ('f(duration, keyStates, value)')
   * is a _value updating function_. It takes a
   * frame duration, the key states of various keys in
   * that frame, and object (of arbitrary form).
   *
   * It should produce an object of that same form.
   *
   *
   * The function adds key-up and key-down handlers to 'obj' that
   * manipulate internal state used by the function 'f'
   *
   * (Note: The 'duration' parameter is typically very short --
   *  a few milliseconds at most.)
   *
   * The frame handler, which takes a 'duration' should be used to get the
   * "observable" value. This is an arbitrary value calculated from the inputs.
   * (You are responsible for updating the current value in your handler.)
   *
   */
  function makeFrameHandler(obj, keyCodes, initValue, frameValue) {

    var keyStates = {}, /* keyStates records the current state of the keys */
        value     = initValue;

    /* Initialise keyStates */
    keyCodes.map(function(keyCode) { keyStates[keyCode]  = KeyState.up });

    /*
     * These closures refer to @keyValues@ and @currentValue@.
     * The key handlers only do something if they key pressed has a
     * @keyCode@ equal to @keyCode@ parameter above.
     */
    var downHandler  = function(e) {
      keyCodes.map(function(keyCode) {
        if (e.keyCode == keyCode ) { keyStates[keyCode] = KeyState.down}
      });
    };
    var upHandler    = function(e) {
      keyCodes.map(function(keyCode) {
        if (e.keyCode == keyCode ) { keyStates[keyCode] = KeyState.up}
      });
    };

    var frameHandler = function(duration) {
      var duration_ = duration > 0 ? duration : 0;
      return frameValue(duration_, keyStates, value);
    };

    var obj_ = $(obj);
    obj_.keyup(upHandler);
    obj_.keydown(downHandler);

    return frameHandler;
  }

  /* Return the "methods" of this "module" */
  return({ makeFrameHandler: makeFrameHandler });

})();
