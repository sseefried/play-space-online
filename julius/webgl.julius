/* -*-javascript-*- */
var interval = 15; /* milliseconds between frames */
var meshSize = 150; /* Number of squares in the mesh. Number of triangles is twice this */
var slowDownFactor = 1000.0; /* Time since start (in milliseconds) is divided by this value */
var KeyState = { up: 0, down:  1 };
var Axis = { x: 0, y: 1, z: 2};
var RotationDirection = { positive: 0, negative: 1};

function initGL(canvas) {
    var gl;
    try {
        gl = canvas.getContext("experimental-webgl");
        gl.viewportWidth = canvas.width;
        gl.viewportHeight = canvas.height;
        return gl;
    } catch (e) {
        return;
    }
}

function getShader(gl, id) {
    var shaderScript = document.getElementById(id);
    if (!shaderScript) {
        return null;
    }

    var str = "";
    var k = shaderScript.firstChild;
    while (k) {
        if (k.nodeType == 3) {
            str += k.textContent;
        }
        k = k.nextSibling;
    }

    var shader;
    if (shaderScript.type == "x-shader/x-fragment") {
        shader = gl.createShader(gl.FRAGMENT_SHADER);
    } else if (shaderScript.type == "x-shader/x-vertex") {
        shader = gl.createShader(gl.VERTEX_SHADER);
    } else {
        return null;
    }

    gl.shaderSource(shader, str);
    gl.compileShader(shader);

    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
        alert(gl.getShaderInfoLog(shader));
        return null;
    }
    return shader;
}

function initShaders(gl, name) {
    var fragmentShader = getShader(gl, "shader-fs-" + name );
    var vertexShader = getShader(gl, "shader-vs-" + name);
    var shaderProgram = gl.createProgram();
    gl.attachShader(shaderProgram, vertexShader);
    gl.attachShader(shaderProgram, fragmentShader);
    gl.linkProgram(shaderProgram);

    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
        alert("Could not initialise shaders");
    }

    gl.useProgram(shaderProgram);

    shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, "uv_a");
    gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);

    shaderProgram.mvpMatrixUniform = gl.getUniformLocation(shaderProgram,
                                                           "ModelViewProjectionMatrix");

    shaderProgram.normalMatrixUniform = gl.getUniformLocation(shaderProgram, "NormalMatrix");
    shaderProgram.timeUniform = gl.getUniformLocation(shaderProgram, "time");
    return shaderProgram;
}

function initBuffers(gl) {
    var squareVertexPositionBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, squareVertexPositionBuffer);

    vertices = mesh(meshSize);
    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);
    squareVertexPositionBuffer.itemSize = 2;
    squareVertexPositionBuffer.numItems = vertices.length / 2 ;
    return squareVertexPositionBuffer;
}

/* For some reason WebGL just hates the (x,y) value (0.0, 0.0). We add a small error value
   to prevent this problem */
function mesh(n) {
    var a = new Float32Array(2*(2*(n*(n+1))  + 2*(n-1)   ));
    var i, j, len = 0;
    var delta = 2.0 / n + 0.000000000000001;

    var x, y = -1.0;
    for (j = 0; j < n; j++, y+=delta) {
        if (j > 0) {
            /* Degenerate triangles */
            a[len++] = 1.0; // x value
            a[len++] = y; // y value
            a[len++] = -1.0; // x value
            a[len++] = y; // y value
        }

        for (i = 0, x = -1.0; i <= n; i++, x+=delta) {
            a[len++] = x; // x value
            a[len++] = y; // y value
            a[len++] = x; // x value
            a[len++] = y+delta; // y value
        }
    }
    return a;
}

function rotateAndZoomView(last, now, keyValues, mvpMatrix) {
  rotateAboutAxis(last, now, keyValues.up,    RotationDirection.positive, Axis.x, mvpMatrix);
  rotateAboutAxis(last, now, keyValues.down,  RotationDirection.negative, Axis.x, mvpMatrix);
  rotateAboutAxis(last, now, keyValues.left,  RotationDirection.positive, Axis.y, mvpMatrix);
  rotateAboutAxis(last, now, keyValues.right, RotationDirection.negative, Axis.y, mvpMatrix);
}

function getDuration(last, now, values) {
    /* Did a keyDown happen this time around? */

    var keyDown = values.downTime >= last && values.downTime < now,
        keyUp   = values.upTime   >= last && values.upTime   < now,
        duration;

    if (keyDown && keyUp) {
        if (values.downTime < values.upTime) {
          // Case 1
          // |  D      U |
          duration = values.upTime - values.downTime;
        } else {
          // Case 2
          // | U      D |
          duration = (now - values.downTime) + (values.upTime - last);
        }
    }
     // Case 3
     // |    U       |
    if (keyDown && !keyUp) {
      duration = values.upTime - last;
    }

    // Case 4
    // |     D      |
    if (!keyDown && keyUp) {
      duration = last - keyValue.up.downTime;
    }

    if (!keyDown && !keyUp) {
      if (values.state == KeyState.up) {
        duration = 0;
      }
      if (values.state == KeyState.down) {
        duration = now - last;
      }
    }
    return duration;
}

function rotateAboutAxis(last, now, values, direction, axis, mvpMatrix) {
  var duration = getDuration(last, now, values), axisVector, amount;

  switch (axis) {
    case Axis.x:
      axisVector = [1.0, 0.0, 0.0];
      break;
    case Axis.y:
      axisVector = [0.0, 1.0, 0.0];
      break;
    case Axis.z:
      axisVector = [0.0, 0.0, 1.0];
      break;
  }

  var amount = duration / slowDownFactor;
  if (direction == RotationDirection.negative) {
      amount = amount * (-1.0);
  }
  mat4.rotate(mvpMatrix, amount, axisVector);
}

/*
 * Creates the drawScene and keyHandler closures for each effect
 * See this Stack Overflow post for more detail on closures:
 *   http://stackoverflow.com/questions/111102/how-do-javascript-closures-work
 */
function createClosures(canvas, i) {
    var startTime = (new Date()).getTime();
    var gl, squareVertexPositionBuffer, shaderProgram,
        mvpMatrix = mat4.create(),
        normalMatrix = mat3.create(),
        lastTime = startTime,
        keyValues = { up:     { upTime: startTime, downTime: false, state: KeyState.up },
                     down:    { upTime: startTime, downTime: false, state: KeyState.up },
                     left:    { upTime: startTime, downTime: false, state: KeyState.up },
                     right:   { upTime: startTime, downTime: false, state: KeyState.up },
                     zoomIn:  { upTime: startTime, downTime: false, state: KeyState.up },
                     zoomOut: { upTime: startTime, downTime: false, state: KeyState.up }};

    mat4.identity(mvpMatrix);
    mat3.identity(normalMatrix);

    mat4.translate(mvpMatrix, [0.0, 0.0, -0.001]);
    gl = initGL(canvas);

    if (!gl && i === 0) {
      alert("Could not initialise WebGL, sorry :-(");
      return;
    } else if (!gl) {
      return;
    }
    shaderProgram = initShaders(gl, canvas.id);
    squareVertexPositionBuffer = initBuffers(gl);
    gl.clearColor(0.0, 0.0, 0.0, 1.0);
    gl.enable(gl.DEPTH_TEST);

    var dsc = function () {
      var time = (new Date()).getTime() - startTime;

      gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

      gl.bindBuffer(gl.ARRAY_BUFFER, squareVertexPositionBuffer);
      gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute,
                             squareVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
      gl.uniformMatrix4fv(shaderProgram.mvpMatrixUniform, false, mvpMatrix);
      gl.uniformMatrix3fv(shaderProgram.normalMatrixUniform, false, normalMatrix);

      rotateAndZoomView(lastTime, time, keyValues, mvpMatrix);
      lastTime = time;

      gl.uniform1f(shaderProgram.timeUniform, time / slowDownFactor);
      gl.drawArrays(gl.TRIANGLE_STRIP, 0, squareVertexPositionBuffer.numItems);
    }

    var kdhc = function keyDownHandler(e) {
        keyHandle(e, keyValues.up,      87, KeyState.down); // W = 87;
        keyHandle(e, keyValues.left,    65, KeyState.down); // A = 65;
        keyHandle(e, keyValues.down,    83, KeyState.down); // S = 83;
        keyHandle(e, keyValues.right,   68, KeyState.down); // D = 68;

        keyHandle(e, keyValues.zoomIn,  81, KeyState.down); // Q = 81;
        keyHandle(e, keyValues.zoomOut, 90, KeyState.down); // Z = 90;
    };

    var kuhc = function keyUpHandler(e) {
        keyHandle(e, keyValues.up,      87, KeyState.up); // W = 87;
        keyHandle(e, keyValues.left,    65, KeyState.up); // A = 65;
        keyHandle(e, keyValues.down,    83, KeyState.up); // S = 83;
        keyHandle(e, keyValues.right,   68, KeyState.up); // D = 68;

        keyHandle(e, keyValues.zoomIn,  81, KeyState.up); // Q = 81;
        keyHandle(e, keyValues.zoomOut, 90, KeyState.up); // Z = 90;
    };

    return { drawSceneClosure: dsc, keyDownHandlerClosure: kdhc, keyUpHandlerClosure: kuhc };
}

/* Modifies values parameter */
function keyHandle(e, values, keyCode, keyDirection) {
  var opposite, key;
  if (keyDirection == KeyState.up) {
    opposite = KeyState.down;
    key = "upTime";
  } else {
    opposite = KeyState.up;
    key = "downTime";
  }

  if (e.keyCode == keyCode && values.state == opposite) {
     values[key] = (new Date()).getTime();
     values.state = keyDirection;
  }
}

function webGLStart() {
    $(".playspace-canvas").each(function(i) {
      var closures = createClosures(this, i);
      setInterval(closures.drawSceneClosure, interval);
      $(this).keydown(closures.keyDownHandlerClosure);
      $(this).keyup(closures.keyUpHandlerClosure)
    });
}
