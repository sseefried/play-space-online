/* -*-javascript-*- */
var interval = 15; /* milliseconds between frames */
var meshSize = 500; /* Number of squares in the mesh. Number of triangles is twice this */
var slowDownFactor = 1000.0; /* Time since start (in milliseconds) is divided by this value */
var KeyState = { up: 0, down:  1 }; /* enumeration */
var Axis = { x: 0, y: 1, z: 2};     /* enumeration */
var RotationDirection = { positive: 0, negative: 1 };

var initVelocity = 0.0;    /* Initial rotation velocity. radians per second (1/s) */
var acceleration = 5.0;  /* Acceleration. radians per second per second. (1/s^2) */
var maxVelocity  = 10.0;
var maxRotation  = maxVelocity * (interval / 1000.0);

function initGL(canvas) {
    var gl;
    try {
        gl = canvas.getContext("experimental-webgl", { antialias: true } );
        gl.viewportWidth = canvas.width;
        gl.viewportHeight = canvas.height;
        return gl;
    } catch (e) {
        return;
    }
}

function getShader(gl, id) {
    var shaderScript = document.getElementById(id);
    if (!shaderScript) {
        return null;
    }

    var str = "";
    var k = shaderScript.firstChild;
    while (k) {
        if (k.nodeType == 3) {
            str += k.textContent;
        }
        k = k.nextSibling;
    }

    var shader;
    if (shaderScript.type == "x-shader/x-fragment") {
        shader = gl.createShader(gl.FRAGMENT_SHADER);
    } else if (shaderScript.type == "x-shader/x-vertex") {
        shader = gl.createShader(gl.VERTEX_SHADER);
    } else {
        return null;
    }

    gl.shaderSource(shader, str);
    gl.compileShader(shader);

    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
        alert(gl.getShaderInfoLog(shader));
        return null;
    }
    return shader;
}

function addShadyUIs(name, gl, shaderProgram) {
  var shady_ui_spec   = $('#' + name + '.shady-ui-spec');
  var shady_ui_widgets = $('#' + name + '.shady-ui-widgets');

  var shady_ui_specs = eval(shady_ui_spec.text());


  var show_ui = (shady_ui_spec.attr('show-ui') || "true") == "true" ? true : false ;

  var i=0;
  for (i=0; i < shady_ui_specs.length; i++) {
    Shady.addUI(shady_ui_widgets, shady_ui_specs[i], show_ui);
  }

  /* Link up uniforms */
  shady_ui_widgets.find('.shady-ui').each(function() {
    var uniform_name; 
    if ( uniform_name = $(this).attr("glsl-name") ) {
      shaderProgram[uniform_name] = gl.getUniformLocation(shaderProgram, uniform_name);
    }
  })

}

function initShaders(gl, name) {
    var fragmentShader = getShader(gl, "shader-fs-" + name);
    var vertexShader   = getShader(gl, "shader-vs-" + name);

    var shaderProgram = gl.createProgram();
    gl.attachShader(shaderProgram, vertexShader);
    gl.attachShader(shaderProgram, fragmentShader);
    gl.linkProgram(shaderProgram);

    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
        alert("Could not initialise shaders");
    }

    gl.useProgram(shaderProgram);

    shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, "mesh_coords");
    gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);

    shaderProgram.mvpMatrixUniform = gl.getUniformLocation(shaderProgram,
                                                           "ModelViewProjectionMatrix");

    shaderProgram.normalMatrixUniform = gl.getUniformLocation(shaderProgram, "NormalMatrix");

    addShadyUIs(name, gl, shaderProgram);


    return shaderProgram;
}

function initBuffers(gl) {
    var squareVertexPositionBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, squareVertexPositionBuffer);

    vertices = mesh(meshSize);
    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);
    squareVertexPositionBuffer.itemSize = 2;
    squareVertexPositionBuffer.numItems = vertices.length / 2 ;
    return squareVertexPositionBuffer;
}

/* For some reason WebGL just hates the (x,y) value (0.0, 0.0). We add a small error value
   to prevent this problem */
function mesh(n) {
    var a = new Float32Array(2*(2*(n*(n+1))  + 2*(n-1)   ));
    var i, j, len = 0;
    var delta = 2.0 / n + 0.000000000000001;

    var x, y = -1.0;
    for (j = 0; j < n; j++, y+=delta) {
        if (j > 0) {
            /* Degenerate triangles */
            a[len++] = 1.0; // x value
            a[len++] = y; // y value
            a[len++] = -1.0; // x value
            a[len++] = y; // y value
        }

        for (i = 0, x = -1.0; i <= n; i++, x+=delta) {
            a[len++] = x; // x value
            a[len++] = y; // y value
            a[len++] = x; // x value
            a[len++] = y+delta; // y value
        }
    }
    return a;
}

function rotateAndZoomView(last, now, keyValues, mvpMatrix) {
  rotateAboutAxis(last, now, keyValues.up,    RotationDirection.positive, Axis.x, mvpMatrix);
  rotateAboutAxis(last, now, keyValues.down,  RotationDirection.negative, Axis.x, mvpMatrix);
  rotateAboutAxis(last, now, keyValues.left,  RotationDirection.positive, Axis.y, mvpMatrix);
  rotateAboutAxis(last, now, keyValues.right, RotationDirection.negative, Axis.y, mvpMatrix);
}

/*
 * Returns (t_down - t_up) where:
 * - t_up is the time the key was up between last and now.
 * - t_down is the time the key was down betwen last and now.
 *
 * - values is the key values containing the upTime and the downTime.
 */
function getDuration(last, now, values) {
    var keyDown = values.downTime >= last && values.downTime < now,
        keyUp   = values.upTime   >= last && values.upTime   < now,
    t_down;

    if (keyDown && keyUp) {
        if (values.downTime < values.upTime) {
          // Case 1
          // |  D      U |
          t_down = values.upTime - values.downTime;
        } else {
          // Case 2
          // | U      D |
          t_down = (now - values.downTime) + (values.upTime - last);
        }
    }
     // Case 3
     // |    U       |
    if (!keyDown && keyUp) {
      t_down = values.upTime - last;
    }

    // Case 4
    // |     D      |
    if (keyDown && !keyUp) {
      t_down = now - values.downTime;
    }

    // Case 5 & 6
    if (!keyDown && !keyUp) {
      if (values.state == KeyState.up) {
        t_down = 0;
      }
      if (values.state == KeyState.down) {
        t_down = now - last;
      }
    }
   /*  t_up == (now - last) - t_down;
    *  t_down - t_up == t_down - ((now - last) - t_down)
    *                == 2*t_down - (now - last)
    *                == 2*t_down - now + last
    */
    var duration = (2*t_down - now + last);
    return duration;
}

function constrain(value, minimum, maximum) {
  return Math.min(Math.max(value, minimum), maximum);
}

function rotateAboutAxis(last, now, values, direction, axis, mvpMatrix) {
  var duration = getDuration(last, now, values) / 1000.0, /* t is in seconds not milliseconds */
    axisVector, amount, u = values.velocity;


  switch (axis) {
    case Axis.x:
      axisVector = [ mvpMatrix[0], mvpMatrix[4], mvpMatrix[8] ];
      break;
    case Axis.y:
      axisVector = [ mvpMatrix[1], mvpMatrix[5], mvpMatrix[9] ];
      break;
    case Axis.z:
      axisVector = [ mvpMatrix[2], mvpMatrix[6], mvpMatrix[10] ];
      break;
  }

  var t    = Math.abs(duration);
  var sign = (duration > 0) ? 1 : (-1);
  var a    = acceleration * sign;

  var amount      = constrain(u*t + 0.5*a*t*t, 0, maxRotation);

  values.velocity = constrain(u + a*t, 0, maxVelocity);

  if (direction == RotationDirection.negative) {
    amount = amount * (-1.0);
  }


  mat4.rotate(mvpMatrix, amount, axisVector);
}

function setUniformsFromShadyUIs(canvas, gl, shaderProgram, time) {
  $('#' + canvas.id + ".shady-ui-widgets").find('.shady-ui').each(function(that) {
     var uniform_name = $(this).attr("glsl-name");
     var ui_type = $(this).attr("glsl-type");

     if ( uniform_name && ui_type ) {
       switch (ui_type) {
         case "time":
           gl.uniform1f(shaderProgram[uniform_name], time / slowDownFactor);
           break;
         case "float":
           gl.uniform1f(shaderProgram[uniform_name], parseFloat($(this).attr("glsl-value")));
           break;
         case "int":
gi           gl.uniform1f(shaderProgram[uniform_name], parseFloat($(this).attr("glsl-value")));
           break;

       }
     }
  });
}

/*
 * Creates the drawScene and keyHandler closures for each effect
 * See this Stack Overflow post for more detail on closures:
 *   http://stackoverflow.com/questions/111102/how-do-javascript-closures-work
 */
function createClosures(canvas, i) {
    var startTime = (new Date()).getTime();
    var gl, squareVertexPositionBuffer, shaderProgram,
        mvpMatrix = mat4.create(),
        normalMatrix = mat3.create(),
        lastTime = false,
        initValues = function() { return { upTime: startTime, downTime: false,
                                           velocity: initVelocity, state: KeyState.up } },
        keyValues = { up:      initValues(),
                      down:    initValues(),
                      left:    initValues(),
                      right:   initValues(),
                      zoomIn:  initValues(),
                      zoomOut: initValues() };

    mat4.identity(mvpMatrix);
    mat3.identity(normalMatrix);

//    mat4.translate(mvpMatrix, [0.0, 0.0, -0.001]);
//    mat4.translate(mvpMatrix, [0.0, 0.0, -0.001]);
    gl = initGL(canvas);

    if (!gl && i === 0) {
      alert("Could not initialise WebGL, sorry");
      return;
    } else if (!gl) {
      return;
    }
    shaderProgram = initShaders(gl, canvas.id);
    squareVertexPositionBuffer = initBuffers(gl);
    gl.clearColor(0.0, 0.0, 0.0, 1.0);
    gl.enable(gl.DEPTH_TEST);

    var dsc = function () {
      var time = (new Date()).getTime() - startTime;


      gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

      gl.bindBuffer(gl.ARRAY_BUFFER, squareVertexPositionBuffer);
      gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute,
                             squareVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
      gl.uniformMatrix4fv(shaderProgram.mvpMatrixUniform, false, mvpMatrix);
      gl.uniformMatrix3fv(shaderProgram.normalMatrixUniform, false, normalMatrix);

      rotateAndZoomView(lastTime || time, time, keyValues, mvpMatrix);
      lastTime = time;

      setUniformsFromShadyUIs(canvas, gl, shaderProgram, time);


      gl.drawArrays(gl.TRIANGLE_STRIP, 0, squareVertexPositionBuffer.numItems);
    }

    var kdhc = function keyDownHandler(e) {
        keyHandle(e, keyValues.up,      87, KeyState.down); // W = 87;
        keyHandle(e, keyValues.left,    65, KeyState.down); // A = 65;
        keyHandle(e, keyValues.down,    83, KeyState.down); // S = 83;
        keyHandle(e, keyValues.right,   68, KeyState.down); // D = 68;

        keyHandle(e, keyValues.zoomIn,  81, KeyState.down); // Q = 81;
        keyHandle(e, keyValues.zoomOut, 90, KeyState.down); // Z = 90;
    };

    var kuhc = function keyUpHandler(e) {
        keyHandle(e, keyValues.up,      87, KeyState.up); // W = 87;
        keyHandle(e, keyValues.left,    65, KeyState.up); // A = 65;
        keyHandle(e, keyValues.down,    83, KeyState.up); // S = 83;
        keyHandle(e, keyValues.right,   68, KeyState.up); // D = 68;

        keyHandle(e, keyValues.zoomIn,  81, KeyState.up); // Q = 81;
        keyHandle(e, keyValues.zoomOut, 90, KeyState.up); // Z = 90;
    };

    return { drawSceneClosure: dsc, keyDownHandlerClosure: kdhc, keyUpHandlerClosure: kuhc };
}

/* Modifies values parameter */
function keyHandle(e, values, keyCode, keyDirection) {
  var opposite, key;
  if (keyDirection == KeyState.up) {
    opposite = KeyState.down;
    key = "upTime";
  } else {
    opposite = KeyState.up;
    key = "downTime";
  }

  if (e.keyCode == keyCode && values.state == opposite) {
     values[key] = (new Date()).getTime();
     values.state = keyDirection;
  }
}

function webGLStart() {
    $(".playspace-canvas").each(function(i) {
      var closures = createClosures(this, i);
      setInterval(closures.drawSceneClosure, interval);
      $(this).keydown(closures.keyDownHandlerClosure);
      $(this).keyup(closures.keyUpHandlerClosure);
    });
}

/*
 * We want, as far as possible, for our interactions (rotate, zoom) with the effects to be
 * continuous. We cannot simply add a fixed amount to the rotation each time a key is pressed.
 * It must be proportional to the amount of time the key is depressed. Another design choice is
 * whether:
 *
 * 1. The rotation speed should be constant, or
 *
 * 2. it should accelerate to a maximum speed and then decellerate the moment the key has been
 * released.
 *
 * Since 1 is simply a special case of 2, I've implemented 2. This is done as follows:
 *
 * - keydown/keyup events are recorded, setting a key-down/key-up time.
 *
 * - whenever a frame is about to be drawn we work out how long the key has been pressed since
 *   the last frame was drawn. We update the velocity and acceleration appropriately using v =
 *   u + a*t and s = u*t + 0.5*a*t^2 where u is initial velocity, v is final velocity, a is
 *   acceleration (a constant), t is the time that passed.
 *
 */


/* A bunch of things need to be done:

a) Rotating about x and y axis is wrong. Should be rotating around the apparent x and y axes. This
   depends on the current mvpMatrix.
b) Friction is like the acceleration but it only applies itself in response to a velocity in a
   particular direction.
c) Need to start using vectors for everything. I hope the library is good for this.

*/