/* Requires modules
   - jquery
   - enumerations
   - shady-ui
   - key-handler
   - mouse-handler
 */

/* "WebGL" is a Javascript "module" defined using Douglas Crockford's technique
 * of returning an object containing functions you want to export. i.e.
 *
 *
 *  var ModuleName = (function() { ... your code goes here;
 *                                return(... object containing methods to export ... )})();
 *
 * By wrapping everything inside a function, Javascript's local
 * scoping rules kick in (as long as all variables are declared with the 'var' keyword)
 * and the code stays encapsulated.
 */
var WebGL = (function() {

  /* -*-javascript-*- */
  var INTERVAL = 15;       /* milliseconds between frames */
  var MESH_SQUARES = 500;  /* Number of squares in the mesh. Number of triangles is twice this */
  var SLOW_DOWN_FACTOR = 1000.0; /* Time since start (in milliseconds) is divided by this value */

  var INIT_VELOCITY = 0.0;    /* Initial rotation velocity. */
  var ACCELERATION = 5.0;     /* Acceleration. */
  var MAX_VELOCITY  = 10.0;
  var ITEM_SIZE = 2;          /* Number of items in each vertex of the mesh.
                               * They are pairs in a plane so it is 2 */
  var INITIAL_MESH_WIDTH = 2.0; /* -1 to 1 on both axes */

  function initGL(canvas) {
      var gl;
      try {
          gl = canvas.getContext("experimental-webgl", { antialias: true } );

          /* The 'width' and 'height' attributes of the canvas object are NOT the same as
           * the display width and display height (which you can control with CSS).
           *
           * The 'width' and 'height' attributes of the canvas element are used to control
           * the size of the *coordinate space*. It is quite possible for the display size
           * to be quite different.
           *
           * We ensure that the canvas attributes and the display width/height are equal in the
           * code below.
           *
           * See http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html
           */
          canvas.width = $(canvas).width();
          canvas.height = $(canvas).width();

          gl.viewportWidth  = $(canvas).width();
          gl.viewportHeight = $(canvas).width();
          return gl;
      } catch (e) {
          return;
      }
  }

  function getShader(gl, id) {
      var shaderScript = document.getElementById(id);
      if (!shaderScript) {
          return null;
      }

      var str = "";
      var k = shaderScript.firstChild;
      while (k) {
          if (k.nodeType === 3) {
              str += k.textContent;
          }
          k = k.nextSibling;
      }

      var shader;
      if (shaderScript.type === "x-shader/x-fragment") {
          shader = gl.createShader(gl.FRAGMENT_SHADER);
      } else if (shaderScript.type === "x-shader/x-vertex") {
          shader = gl.createShader(gl.VERTEX_SHADER);
      } else {
          return null;
      }

      gl.shaderSource(shader, str);
      gl.compileShader(shader);

      if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
          alert(gl.getShaderInfoLog(shader));
          return null;
      }
      return shader;
  }


  function logProgram(canvas) {
    var canv = document.getElementById($(canvas).attr("id"));
    var gl = canv.getContext("experimental-webgl");
    [ "DELETE_STATUS", "LINK_STATUS", "VALIDATE_STATUS",
      "ATTACHED_SHADERS", "ACTIVE_ATTRIBUTES", "ACTIVE_UNIFORMS" ].map(function(attr) {
       console.log(attr + " =  " + gl.getProgramParameter(canvas.shaderProgram, gl[attr]));
    });
  }

  /*
   * Takes a canvas object that has been extended with a 'shaderProgram' attribute,
   * corresponding to the GLSL shader program displaying in the canvas. It then
   * unlinks all the programs and removes any event handlers.
   */
  function cleanUpCanvas(canvases) {
    $(canvases).each(function() {
      var canvas = this;
      var gl = canvas.getContext("experimental-webgl");
      if (gl === undefined || canvas.shaderProgram === undefined) { return; }
      gl.getAttachedShaders(canvas.shaderProgram).map(function (shader) {
        gl.detachShader(canvas.shaderProgram, shader);
        gl.deleteShader(shader);
      });
      gl.deleteBuffer(canvas.shaderProgram.buffer);


      gl.disableVertexAttribArray(canvas.shaderProgram.vertexPositionAttribute);
      gl.deleteProgram(canvas.shaderProgram);

      clearInterval(canvas.intervalFunctionId);
      $(canvas).unbind(); /* Unbind all event handlers */
    });
  }

  /*
   * Resets all canvases
   */
  function reset() {
    $('canvas').each(function() {
      $('.shady-ui-widgets').empty();
      cleanUpCanvas(this);
      webGLStart();
      // Focus on the first canvas
      $('canvas')[0].focus();
    });
  }


  /*
   * This button empties the widgets, unbinds event handlers and re-runs 'webGLStart'
   */
  function addResetButton(parent) {
    $(parent).append('<input id="reset-button" type="submit" value="Reset">')
    $('#reset-button').click(reset);
  }

  function addShadyUIs(name, gl, shaderProgram) {
    var shadyUISpec   = $('#' + name + '.shady-ui-spec');
    var shadyUIWidgets = $('#' + name + '.shady-ui-widgets');
    var shadyUISpecs = eval(shadyUISpec.text());
    var showUI = (shadyUISpec.attr('show-ui') || "true") === "true" ? true : false ;
    var i=0;

    if (showUI) {
      addResetButton(shadyUIWidgets);
    }

    for (i=0; i < shadyUISpecs.length; i++) {
      ShadyUI.addUI(shadyUIWidgets, shadyUISpecs[i], showUI);
    }

    /* Link up uniforms */
    shadyUIWidgets.find('.shady-ui').each(function() {
      var uniformName;
      if ( uniformName = $(this).attr("glsl-name") ) {
        shaderProgram[uniformName] = gl.getUniformLocation(shaderProgram, uniformName);
      }
    })

  }

  function initShaders(gl, name) {
      var fragementShader, vertexShader;

      fragmentShader = getShader(gl, "shader-fs-" + name);
      vertexShader   = getShader(gl, "shader-vs-" + name);

      var shaderProgram = gl.createProgram();

      gl.attachShader(shaderProgram, vertexShader);
      gl.attachShader(shaderProgram, fragmentShader);
      gl.linkProgram(shaderProgram);

      if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
          alert("Could not initialise shaders");
      }

      gl.useProgram(shaderProgram);

      shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, "meshCoords");
      gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);

      /*
       * We add several properties to the shaderProgram object here.
       * (You can do this with Javascript objects; just add 'em in there.)
       * They are all GLSL uniform locations.
       */
      shaderProgram.mvpMatrixUniform    = gl.getUniformLocation(shaderProgram,
                                                                "ModelViewProjectionMatrix");
      shaderProgram.normalMatrixUniform  = gl.getUniformLocation(shaderProgram, "NormalMatrix");
      shaderProgram.zoomUniform          = gl.getUniformLocation(shaderProgram, "zoom");
      shaderProgram.panUniform           = gl.getUniformLocation(shaderProgram, "pan");
      shaderProgram.aRowUniform          = gl.getUniformLocation(shaderProgram, "aRow");
      shaderProgram.bRowUniform          = gl.getUniformLocation(shaderProgram, "bRow");
      shaderProgram.cRowUniform          = gl.getUniformLocation(shaderProgram, "cRow");
      addShadyUIs(name, gl, shaderProgram);

      return shaderProgram;
  }

  /* For some reason WebGL just hates the (x,y) value (0.0, 0.0). We add a small error value
     to prevent this problem */
  function mesh(n,width) {
      var a = new Float32Array(2*(2*(n*(n+1))  + 2*(n-1)   ));
      var i, j, len = 0;
      var delta = width / n + 0.000000000000001;

      var x, y = -(width/2.0);
      for (j = 0; j < n; j++, y+=delta) {
          if (j > 0) {
              /* Degenerate triangles */
              a[len++] = (width/2.0); // x value
              a[len++] = y; // y value
              a[len++] = -(width/2); // x value
              a[len++] = y; // y value
          }

          for (i = 0, x = -(width/2); i <= n; i++, x+=delta) {
              a[len++] = x; // x value
              a[len++] = y; // y value
              a[len++] = x; // x value
              a[len++] = y+delta; // y value
          }
      }
      return a;
  }

  /*
   * Turns a zoom displacement to a zoom factor. A zoom displacement has the following properties.
   *
   * 1. A displacement of zero is "no zoom".
   * 2. Positive zoom "zooms in".
   * 3. Negative zoom "zooms out".
   *
   * A zoom displacement of 1 means "zoom in by 100%"
   * and produces a zoom factor of 2.
   *
   * A zoom displacement of -1 means "zoom out by 100%"
   * and produces a zoom factor of 1/2
   *
   */
  function displacementToZoomFactor(z) {
    return z >= 0 ? z + 1 : 1/(1-z);
  }


  function setUniformsFromShadyUIs(canvas, gl, shaderProgram, time) {
    $('#' + canvas.id + ".shady-ui-widgets").find('.shady-ui').each(function(that) {
       var uniformName = $(this).attr("glsl-name");
       var uiType = $(this).attr("glsl-type");

       if ( uniformName && uiType ) {
         switch (uiType) {
           case "time":
             gl.uniform1f(shaderProgram[uniformName], time / SLOW_DOWN_FACTOR);
             break;
           case "float":
             gl.uniform1f(shaderProgram[uniformName], parseFloat($(this).attr("glsl-value")));
             break;
           case "int":
             gl.uniform1f(shaderProgram[uniformName], parseFloat($(this).attr("glsl-value")));
             break;

         }
       }
    });
  }

  /*
   * Creates the drawScene and keyHandler closures for each effect
   * See this Stack Overflow post for more detail on closures:
   *   http://stackoverflow.com/questions/111102/how-do-javascript-closures-work
   */
  function createClosures(canvas, i) {
      var startTime = (new Date()).getTime();
      var gl, squareVertexPositionBuffer, shaderProgram,
          initialMVPMatrix = mat4.create(),
          initialRotationMatrix = mat4.create(), // For object rotation
          normalMatrix = mat3.create(),
          lastTime = false,
          initValues = function() { return { upTime: startTime, downTime: 0,
                                             velocity: INIT_VELOCITY,
                                             state: KeyState.up } },
          keyValues = { up:      initValues(),
                        down:    initValues(),
                        left:    initValues(),
                        right:   initValues() };


      mat4.identity(initialMVPMatrix);
      mat4.identity(initialRotationMatrix);
      mat3.identity(normalMatrix);

      gl = initGL(canvas);

      if (!gl && i === 0) {
        alert("Could not initialise WebGL, sorry");
        return;
      } else if (!gl) {
        return;
      }

      gl.clearColor(0.0, 0.0, 0.0, 1.0);
      gl.enable(gl.DEPTH_TEST);

      shaderProgram = initShaders(gl, canvas.id);

      /* We store the 'shaderProgram' in the canvas too. */
      canvas.shaderProgram = shaderProgram;

      /*
       * Create and bind buffer. This can only be done once.
       * You can change the data that the buffer points to with gl.bufferData
       */

      shaderProgram.buffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, shaderProgram.buffer);


      var meshWidth = INITIAL_MESH_WIDTH;

      var verticesObj = { vertices: [] }; // This object is modified by bindMeshToBuffer
      bindMeshToBuffer(gl, verticesObj, shaderProgram.vertexPositionAttribute, meshWidth);
      gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);

      /* FIXME: Do with a slider */

      /* Handlers to change the mesh size */
      $(canvas).keypress(function(e) {
        var decreaseKeys = [",","<"], increaseKeys = [".", ">"], changed = false;

        if (decreaseKeys.some(function(s) { return(s.charCodeAt(0) == e.charCode);})) {
          meshWidth /= 2;
          changed = true;
        }
        if (increaseKeys.some(function(s) { return(s.charCodeAt(0) == e.charCode);})) {
          meshWidth *= 2;
          changed = true;
        }
        if (changed) { bindMeshToBuffer(gl, verticesObj,
                                        shaderProgram.vertexPositionAttribute, meshWidth); }
      })

      var initialPanValues = { xDisp: 0.0
                             , xVelocity: 0.0
                             , yDisp: 0.0
                             , yVelocity: 0.0
                             , canvasWidth: $(canvas).width()
                             , canvasHeight: $(canvas).height() };

      var panFrameHandler =  FrameHandler.pan(canvas, initialPanValues);
      var objectRotationFrameHandler = FrameHandler.objectRotation(canvas, initialRotationMatrix);
      var cameraRotationFrameHandler = FrameHandler.cameraRotation(canvas, initialMVPMatrix);
      var zoomFrameHandler = FrameHandler.zoom(canvas);

      var display_scene_closure = function () {

        var time = (new Date()).getTime() - startTime;

        var duration = time - (lastTime || time);

        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

        gl.uniformMatrix3fv(shaderProgram.normalMatrixUniform, false, normalMatrix);

        var mvpMatrix = cameraRotationFrameHandler(duration);

        gl.uniformMatrix4fv(shaderProgram.mvpMatrixUniform, false, mvpMatrix);

        var zDisp = zoomFrameHandler(duration);
        gl.uniform1f(shaderProgram.zoomUniform,displacementToZoomFactor(zDisp));

        var m = objectRotationFrameHandler(duration);

        gl.uniform3fv(shaderProgram.aRowUniform, [m[0],m[4],m[8]]);
        gl.uniform3fv(shaderProgram.bRowUniform, [m[1],m[5],m[9]]);
        gl.uniform3fv(shaderProgram.cRowUniform, [m[2],m[6],m[10]]);

        var p = panFrameHandler(duration);
        gl.uniform3fv(shaderProgram.panUniform, [p.xDisp, p.yDisp, 0]);

        setUniformsFromShadyUIs(canvas, gl, shaderProgram, time);

        /* Now draw the frame */
        gl.drawArrays(gl.TRIANGLE_STRIP, 0, verticesObj.vertices.length / ITEM_SIZE);
        lastTime = time;

      };

      $(canvas).keydown(function(e) {
        console.log(e.keyCode);
      });

      canvas.intervalFunctionId = setInterval(display_scene_closure, INTERVAL);
  }

  function bindMeshToBuffer(gl, verticesObj, vertexPositionAttribute, meshWidth) {
    verticesObj.vertices = mesh(MESH_SQUARES,meshWidth);
    gl.bufferData(gl.ARRAY_BUFFER, verticesObj.vertices, gl.STATIC_DRAW);
    gl.vertexAttribPointer(vertexPositionAttribute, ITEM_SIZE, gl.FLOAT, false, 0, 0);
  }


  function webGLStart() {
      $(".playspace-canvas").each(function(i) {
        $(this).unbind();
        createClosures(this, i);
      });
  }

  /* Return "methods" for this "module". See top of file for explanation. */
  return({ cleanUpCanvas: cleanUpCanvas
         , reset: reset
         , start: webGLStart });

})();
