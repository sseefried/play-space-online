
/* Requires
  - jquery
  - underscore
 */

var MouseHandler = (function() {
 /*
  *
  * There are several things you want to know about mouse movement in a frame
  *
  * a) where the mouse was at the start of the frame
  * b) where the mouse was at the end of the frame
  * c) whether the modifier keys were depressed
  * d) whether the mouse button was depressed.
  *
  * The frames are short enough that we consider keys or mouse to be depressed if
  * the state at the end of the frame is depressed.
  */


 /*
  * 'mouseMoveDict' is an dictionary of "mouse move" objects.
  *
  * e.g. { "pan": <pan mouse move object>, "rotate": <rotate mouse move object>,
  *        "zoom": <zoom mouse move object> }
  *
  * Each of these objects is of form:
  *
  *   { keyCodes:          [<key code>,...]
  *   , initialValue:      <initial value>
  *   , frameValue: <mouse move function> } ]
  *
  *  The 'keyCodes' represents are collection of keys, known as "modifier keys" ,
  *  that are associated with a "mouse move function". Note, that 'keyCodes'
  *  can be the empty array, meaning that no modifier keys are necessary.
  *
  *  The 'initialValue' is an object of arbitrary form, used to maintain state between
  *  calls to 'frameValue'.
  *
  *  The 'frameValue' is of form:
  *
  *   function(duration, mouseKeyStates, value)
  *
  * The 'value' parameter is the current state of the object initially defined by
  * 'initalValue'. Any changes to it will be propagated to subsequent calls to
  * 'frameValue'.
  *
  * The 'frameValue' returns an "observable value". It is not necessarily the
  * same form as the 'value' parameter. It is the value returned by the "frame handler"
  * described below.
  *
  * 'mouseKeyStates' is an object of the form:
  *
  * { modifiersOnlyDown: <boolean>, mouseDown: <boolean>
  * , startX: <number>, startY: <number>
  * , finishX: <number>, finishY: <number> }
  *
  *
  * - 'modifiersOnlyDown' specifies whether all the modifier keys are depressed
  * - 'mouseDown' specifies whether the mouse was depressed.
  * - 'startX', 'startY' are the mouse co-ordinates at the start of the frame.
  * - 'finishX', 'finishY' are the mouse co-ordinates at the finish of the frame.
  *
  *
  * Side effects
  * ------------
  * This function attaches key-up, key-down, mouse-up, mouse-down and mouse-move handlers to
  * 'obj' to keep track the state of keys and mouse moves.
  *
  * Return value
  * ------------
  * The function returns a frame handler, a function of form:
  *
  *   function(duration)
  *
  * which returns an object of form { <key 1>: <observable value>
  *                                 , ...
  *                                 , <key n>: <obervable value> }
  *
  * The keys are the same as those of 'mouseMoveDict'.
  * The "observable value" is the value returned from the 'frameValue' (see above).
  *
  */
  function makeFrameHandler(obj, mouseMoveDict) {
    var dictKeys = _.keys(mouseMoveDict);
    /* Key codes in all the "mouse move objects" of 'mouseMoveDict' */
    var keyStates = {}, mouseState = MouseState.up,
        // Using the fantastic underscore.js here.
        allKeyCodes = _.chain(mouseMoveDict)
                       .map(function(mouseMoveObj) {
                          return mouseMoveObj.keyCodes })
                       .flatten()
                       .uniq()
                       .value();
    var valuesDict = _.tap({}, function(valuesDict) {
      dictKeys.map(function(dictKey) {
        valuesDict[dictKey] = mouseMoveDict[dictKey].initialValue;
      });
    });

    /* Mouse positions */
    var origin = { x: $(obj).offset().left + $(obj).width()/2
                 , y: $(obj).offset().top  + $(obj).height()/2 },
        absoluteMousePos = { x: 0, y: 0 },     /* instantaneous mouse position */
        lastMousePos = { x: 0, y: 0};  /* _relative_ mouse pos for last frame */


    /* Initialise keyStates */
    allKeyCodes.map(function(keyCode) { keyStates[keyCode]  = KeyState.up });

    /*
     * This function checks that all the keys in 'keyCodes' are depressed and *only*
     * they are depressed.
     * For instance the modifier key for one "mouse move function" could be
     * Ctrl and it could be Ctrl+Cmd for another. If Ctrl+Cmd are depressed then
     *
     *   modifierKeysOnlyDown([<Ctrl key code>, <Cmd key code>]) === true
     *
     * while:
     *
     *   modifierKeysOnlyDown([<Ctrl key code>]) === false
     *
     */
    var modifierKeysOnlyDown = function(downKeyCodes) {

      /* Remove from 'allKeyCodes' those keys should be down */
      var upKeyCodes = _.difference(allKeyCodes, downKeyCodes);

      var allUpKeysAreUp = _.all(upKeyCodes, function(upKeyCode) {
                                  return (keyStates[upKeyCode] === KeyState.up); });
      var allDownKeysAreDown = _.all(downKeyCodes, function(downKeyCode) {
                                       return (keyStates[downKeyCode] === KeyState.down);});
      return (allUpKeysAreUp && allDownKeysAreDown);
    }

    var downHandler = function(e) {
      allKeyCodes.map(function(keyCode) {
        if (e.keyCode == keyCode ) { keyStates[keyCode] = KeyState.down}
      });
    };

    var upHandler = function() {
      allKeyCodes.map(function(keyCode) {
        if (e.keyCode == keyCode ) { keyStates[keyCode] = KeyState.up}
      });
    };

    var mouseMoveHandler = function(e) {
      absoluteMousePos = { x: e.pageX, y: e.pageY };
    }

    function mousePos() {
      return({ x: absoluteMousePos.x - origin.x, y: absoluteMousePos.y - origin.y});
    }

    var frameHandler = function(duration) {
      var duration_ = duration > 0 ? duration : 0;
      var obj = {};
      dictKeys.map(function(dictKey) {
        var modifiersOnlyDown = modifierKeysOnlyDown(mouseMoveDict[dictKey].keyCodes);
        var mouseDown = (mouseState === MouseState.down);
        var mouseKeyStates = { modifiersOnlyDown: modifiersOnlyDown
                             , mouseDown: mouseDown
                             , startX: lastMousePos.x
                             , startY: lastMousePos.y
                             , finishX: mousePos().x
                             , finishY: mousePos().y };

        // Set the return value
        obj[dictKey] = mouseMoveDict[dictKey]
                         .frameValue(duration_, mouseKeyStates, valuesDict[dictKey]);

      });
      lastMousePos = mousePos(); // set last mouse position to the current one
      return obj;
    }

    var obj_ = $(obj), body = $('body');
    obj_.keyup(upHandler);
    obj_.keydown(downHandler);
    obj_.mousemove(mouseMoveHandler);

    body.mousedown(function() { mouseState = MouseState.down});
    body.mouseup(function ()  { mouseState = MouseState.up  });

    return frameHandler;
  }

  /* Return the "methods" of this "module". */
  return({ makeFrameHandler: makeFrameHandler });

})();

